name: Build Opencast Testing RPMs

on:
  workflow_dispatch:
  schedule:
    - cron: '30 2 * * *'
  push:
    branches:
      - 'r/*'
    paths:
      - oc.version
      - .github/workflows/build-opencast-testing.yml
      - rpmbuild/SOURCES/*
      - rpmbuild/SPECS/opencast.spec

jobs:
  build:
    strategy:
      matrix:
        osversion:
          - 7
          - 8
          - 9
    outputs:
      oc-version: ${{ steps.version.outputs.version }}
    name: build (el${{ matrix.osversion }})
    runs-on: ubuntu-latest
    container:
      image: docker.io/lkiesow/opencast-rpmbuild:el${{ matrix.osversion }}-oc14
    steps:
      - uses: actions/checkout@v3

      - id: version
        run: echo "version=$(cat oc.version)" >> $GITHUB_OUTPUT

      - name: clone opencast
        run: |
          git clone --branch r/$(cat oc.version).x --depth 1 https://github.com/opencast/opencast.git

      - name: check if new version exists
        id: version-check
        working-directory: opencast
        env:
          S3_HOST: ${{ secrets.S3_HOST }}
        run: |
          curl -sO https://${S3_HOST}/opencast-pkg/rpms/testing/el/${{ matrix.osversion }}/oc-${{ steps.version.outputs.version }}/noarch/latest.commit
          git rev-parse HEAD > current.commit
          if diff -q latest.commit current.commit; then
            echo "new=no" >> "$GITHUB_OUTPUT"
          else
            echo "new=yes" >> "$GITHUB_OUTPUT"
          fi

      - name: cache local maven repository
        if: steps.version-check.outputs.new == 'yes'
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: clone mvn.opencast.org
        if: steps.version-check.outputs.new == 'yes'
        run: |
          git clone --depth 1 https://github.com/opencast/mvn.opencast.org.git

      - name: prepare additional maven repository
        if: steps.version-check.outputs.new == 'yes'
        working-directory: opencast
        run: |
          sed -i "s#https://mvn.opencast.org/#file://$(readlink -f ../mvn.opencast.org)#" pom.xml

      - name: build opencast
        if: steps.version-check.outputs.new == 'yes'
        working-directory: opencast
        run: >
          mvn
          --batch-mode
          -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
          -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
          -Dcheckstyle.skip=true
          -DskipTests
          clean install

      - name: list distributions to build
        if: steps.version-check.outputs.new == 'yes'
        run: |
          find opencast/build/ -type f -name 'opencast-dist-*gz' \
            | sed 's/^.*opencast-dist-\([^-]*\)-.*$/\1/' \
            | tee rpmbuild/SPECS/dists

      - name: move build artifacts
        if: steps.version-check.outputs.new == 'yes'
        run: |
          cp -rv rpmbuild/ ~
          mv -v opencast/build/opencast-dist-*.tar.gz ~/rpmbuild/SOURCES/

      - name: define rpm version
        if: steps.version-check.outputs.new == 'yes'
        run: |
          echo "%octarversion ${{ steps.version.outputs.version }}-SNAPSHOT" >> ~/.rpmmacros
          echo "%ocversion ${{ steps.version.outputs.version }}" >> ~/.rpmmacros
          echo "%ocrelease 0.$(date +%Y%m%d%H%M%S)" >> ~/.rpmmacros

      - name: build rpms
        if: steps.version-check.outputs.new == 'yes'
        working-directory: /github/home/rpmbuild/SPECS
        run: |
          for dist in $(cat dists); do
            rpmbuild -ba -D "ocdist ${dist}" opencast.spec
          done

      - name: list rpms
        if: steps.version-check.outputs.new == 'yes'
        working-directory: /github/home/rpmbuild/RPMS/noarch
        run: |
          du -hs opencast*.rpm

      - name: prepare gpg
        if: steps.version-check.outputs.new == 'yes'
        env:
          GPG_KEY: ${{ secrets.GPG_KEY_OC14 }}
        run: |
          echo "${GPG_KEY}" | gpg --import
          echo '%_gpg_name cloud@opencast.org' >> ~/.rpmmacros

      - name: sign rpms
        if: steps.version-check.outputs.new == 'yes'
        working-directory: /github/home/rpmbuild/RPMS/noarch
        run: |
          rpmsign --addsign *.rpm

      - name: configure s3cmd
        if: steps.version-check.outputs.new == 'yes'
        env:
          S3_HOST: ${{ secrets.S3_HOST }}
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
        run: |
          echo "host_base = ${S3_HOST}" > "$HOME/.s3cfg"
          echo "host_bucket = ${S3_HOST}" >> "$HOME/.s3cfg"
          echo "bucket_location = us-east-1" >> "$HOME/.s3cfg"
          echo "use_https = True" >> "$HOME/.s3cfg"
          echo "access_key = ${S3_ACCESS_KEY}" >> "$HOME/.s3cfg"
          echo "secret_key = ${S3_SECRET_KEY}" >> "$HOME/.s3cfg"
          echo "signature_v2 = False" >> "$HOME/.s3cfg"

      - name: publish repository rpm
        if: steps.version-check.outputs.new == 'yes'
        working-directory: /github/home/rpmbuild/RPMS/noarch/
        run: |
          s3cmd put -P *.rpm "s3://opencast-pkg/rpms/testing/el/${{ matrix.osversion }}/oc-${{ steps.version.outputs.version }}/noarch/"

      # keep latest 14 * 6 = 84 builds
      - name: remove old builds
        if: steps.version-check.outputs.new == 'yes'
        run: |
          s3cmd ls "s3://opencast-pkg/rpms/testing/el/${{ matrix.osversion }}/oc-${{ steps.version.outputs.version }}/noarch/opencast-" |\
            sort |\
            head -n -84 |\
            sed 's_^.*s3://_s3://_' |\
            while read i
          do
            s3cmd del "$i";
          done

      - name: keep track of latest build
        if: steps.version-check.outputs.new == 'yes'
        working-directory: opencast
        run: |
          s3cmd put -P current.commit "s3://opencast-pkg/rpms/testing/el/${{ matrix.osversion }}/oc-${{ steps.version.outputs.version }}/noarch/latest.commit"

  createrepo:
    uses: opencast/opencast-rpmbuild/.github/workflows/createrepo.yml@r/14.x
    needs: build
    strategy:
      matrix:
        os-version:
          - 7
          - 8
          - 9
    with:
      oc-version: ${{ needs.build.outputs.oc-version }}
      os-version: ${{ matrix.os-version }}
      arch: noarch
      repo: release
    secrets:
      S3_HOST: ${{ secrets.S3_HOST }}
      S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
      S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
